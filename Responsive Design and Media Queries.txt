• Hands-On: Make the portfolio website mobile-responsive 
• Client Project: Fully responsive Portfolio Website across devices


1) Responsive web design -> * Responsive web design is about creating web pages that look good on all devices.
                            * A responsive web design will automatically adjust for different screen sizes and viewport.
			    * Responsive Web Design is about using HTML and CSS to automatically resize, hide, shrink, or enlarge,
                              a website, to make it look good on all devices (desktops, tablets, and phones).



1.1) Setting The Viewport:
   -> To create a responsive website, add the following <meta> tag to all your web pages.
      <meta name="viewport" content="width=device-width, initial-scale=1.0">

1.2) Responsive Images:
   -> Responsive images are images that scale nicely to fit any browser size.
      Using the width Property
      If the CSS width property is set to 100%, the image will be responsive and scale up and down.
      <img src="img_girl.jpg" style="width:100%;">

    * Using the max-width Property
    -> If the max-width property is set to 100%, the image will scale down if it has to, but never scale up to be larger than its original size:
       <img src="img_girl.jpg" style="max-width:100%;height:auto;">

1.3) The HTML <picture> element allows you to define different images for different browser window sizes.
     <picture>
	  <source srcset="img_smallflower.jpg" media="(max-width: 600px)">
 	 <source srcset="img_flowers.jpg" media="(max-width: 1500px)">
 	 <source srcset="flowers.jpg">
 	 <img src="img_smallflower.jpg" alt="Flowers">
    </picture>

1.4) Responsive Text Size ->
  -> The text size can be set with a "vw" unit, which means the "viewport width".
     <h1 style="font-size:10vw">Hello World</h1>

1.5) Media Queries ->
   -> In addition to resize text and images, it is also common to use media queries in responsive web pages.
      With media queries you can define completely different styles for different browser sizes.
	<style>
	.left, .right {
	  float: left;
		  width: 20%; 
	}
	.main {
	  float: left;
 	 width: 60%; 
	}
	@media screen and (max-width: 800px) {
 	 .left, .main, .right {
 	   width: 100%; /* The width is 100%, when the viewport is 800px or smaller */
 	 }
	}
	</style>

2) What is a Media Query?
-> Media query is a CSS technique introduced in CSS3.
   It uses the @media rule to include a block of CSS properties only if a certain condition is true.

	@media only screen and (max-width: 600px) {
	  body {
 	   background-color: lightblue;
 	 }
	}
 2.1) Add a Breakpoint -> 
   -> Earlier in this tutorial we made a web page with rows and columns, and it was responsive, but it did not look good on a small screen.
      Media queries can help with that. We can add a breakpoint where certain parts of the design will behave differently on each side of the breakpoint.
      Desktop
      Phone
	@media only screen and (max-width: 600px) {
	  .item1 {grid-area: 1 / span 6;}
	  .item2 {grid-area: 2 / span 6;}
	  .item3 {grid-area: 3 / span 6;}
 	 .item4 {grid-area: 4 / span 6;}
 	 .item5 {grid-area: 5 / span 6;}
	}

2.2) Another Breakpoint ->
  -> You can add as many breakpoints as you like.
     We will also insert a breakpoint between tablets and mobile phones.
     Desktop
     Tablet
     Phone

	@media only screen and (max-width: 600px) {
	  .item1 {grid-area: 1 / span 6;}
	  .item2 {grid-area: 2 / span 6;}
  	.item3 {grid-area: 3 / span 6;}
  	.item4 {grid-area: 4 / span 6;}
 	 .item5 {grid-area: 5 / span 6;}
	}

	@media only screen and (min-width: 600px) {
	  .item1 {grid-area: 1 / span 6;}
	  .item2 {grid-area: 2 / span 1;}
  	.item3 {grid-area: 2 / span 4;}
	  .item4 {grid-area: 3 / span 6;}
  	.item5 {grid-area: 4 / span 6;}
	}

	@media only screen and (min-width: 768px) {
  	.item1 {grid-area: 1 / span 6;}
  	.item2 {grid-area: 2 / span 1;}
  	.item3 {grid-area: 2 / span 4;}
 	 .item4 {grid-area: 2 / span 1;}
  	.item5 {grid-area: 3 / span 6;}
	}
2.3) Typical Device Breakpoints ->
  -> There are tons of screens and devices with different heights and widths, so it is hard to create an exact breakpoint for each device. To keep things simple you could target five groups:

     Extra small devices (phones, 600px and down)
     @media only screen and (max-width: 600px) {...}

     Small devices (portrait tablets and large phones, 600px and up)
     @media only screen and (min-width: 600px) {...}

     Medium devices (landscape tablets, 768px and up)
     @media only screen and (min-width: 768px) {...}

     Large devices (laptops/desktops, 992px and up)
     @media only screen and (min-width: 992px) {...}

     Extra large devices (large laptops and desktops, 1200px and up)
     @media only screen and (min-width: 1200px) {...}

2.4) Orientation: Portrait / Landscape ->
  -> Media queries can also be used to change layout of a page depending on the orientation of the browser.
     You can have a set of CSS properties that will only apply when the browser window is wider than its height, a so called "Landscape" orientation:
	@media only screen and (orientation: landscape) {
	  body {
	    background-color: lightblue;
	  }
	}
2.5) Hide Elements With Media Queries ->
  -> Another common use of media queries, is to hide elements on different screen sizes.
     @media only screen and (max-width: 600px) {
      div.example {
      display: none;
     }
   }

2.6) Change Font Size With Media Queries ->
  -> You can also use media queries to change the font size of an element on different screen sizes:
	@media only screen and (min-width: 601px) {
	  div.example {
 	   font-size: 80px;
 	 }
	}

	/* If the screen size is 600px or less, set the font-size of <div> to 30px */
	@media only screen and (max-width: 600px) {
	  div.example {
	    font-size: 30px;
	  }
	}

3) mobile-first approach ->
-> Mobile-first design is an approach where you design your website for mobile devices first and then for desktops
   The mobile-first approach is designing for the smallest screen and working your way up. 
   * To create a successful mobile-first website, consider the following tips ->
	1) Use large fonts and buttons to make navigation easier on small screens.
	2) Keep the text short and to the point to improve readability.
	3) Use high-quality images to make the content visually appealing.

   3.1) Responsive Design -> Ensures your website adapts to any device, from smartphones to desktops, reaching a wider audience.
   3.2) Simplified Content -> Streamlines and simplifies information, making it easily accessible on smaller screens.
   3.3) Growing Mobile Usage -> Meets the increasing demand for mobile-friendly websites as more people use their smartphones and tablets to browse the internet.
   3.4) Improved SEO -> Enhances your website’s SEO ranking, making it more likely to appear in search results and attract more visitors.
   3.5) Optimized Performance -> Uses smaller, optimized images and efficient code that load quickly on mobile devices, providing a better user experience.